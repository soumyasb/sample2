import React, { Component } from "react";
import { ScrollPanel } from "primereact/components/scrollpanel/ScrollPanel";
import { connect } from "react-redux";
import { bindActionCreators } from "redux";
import { initNewsItemPage, initCreateNewsItemObj, initEditNewsItemObj } from "../../../store/actions/newsItemActions";
import { Table, Button, Icon, Divider } from 'antd';
import { showModal } from "../../../store/actions/uiActions";
import moment from "moment";
import NewsModal from './NewsModal';

class NewsItem extends React.Component {

    constructor(props) {
        super(props);
        this.columns = [
            {
                title: 'Author Name',
                dataIndex: 'authorName',
                width: '6%',
                key: 'authorName'
                
            },
            {
                title: 'Priority',
                dataIndex: 'priority',
                width: '6%',
                key: 'priority',
                render: (priority) =>
                {
                    if(priority == "A")
                    {
                        return <p> Urgent </p>
                    }
                    if(priority == "B")
                    {
                        return <p> Normal </p>
                    }
                    if(priority == "C")
                    {
                        return <p> Low </p>
                    }
                }

            },
            {
                title: 'Subject',
                dataIndex: 'subject',
                width: '10%',
                key: 'subject'
            },
            {
                title: 'News Text',
                dataIndex: 'newsText',
                width: '42%%',
                key: 'newsText',
                className: 'newsItemsPage-newsText',
                render: (newsText) => 
                {
                    return <div style={{wordBreak: "keep-all"}}><p>{newsText}</p></div>
                }

            },
            {
                title: 'Create Date',
                dataIndex: 'createDate',
                width: '8%',
                key: 'createDate',
                render: (createDate) =>
                    moment(createDate).format("MM/DD/YYYY")
            },
            {
                title: 'Start Date',
                dataIndex: 'startDate',
                width: '8%',
                key: 'startDate',
                render: (startDate) =>
                    moment(startDate).format("MM/DD/YYYY")
            },
            {
                title: 'End Date',
                dataIndex: 'endDate',
                width: '8%',
                key: 'endDate',
                render: (endDate) =>
                moment(endDate).format("MM/DD/YYYY")
            },
            {
                width: '8%',
                render: (item) => {
                    return (
                        <div style={{textAlign: "center"}}>
                             <Icon type="edit" style={{ cursor: 'pointer' }} onClick={e => this.showModal(e, 'edit', item.newsId)} />
                             <Divider type="vertical" />
                             <Icon type="delete" style={{ cursor: 'pointer' }} onClick={e => this.showModal(e, 'delete', item.newsId)} />
                             <Divider type="vertical" />
                             <Icon type="profile" style={{ cursor: 'pointer' }} onClick={e => this.showModal(e, 'details', item.newsId)} />
                        </div>
                    );
                },
            },
        ];

        this.state = {
            actionType: '',
            showModal: false,
        }

        this.showModal = this.showModal.bind(this);
        this.handleCancel = this.handleCancel.bind(this);
        this.handleOk = this.handleOk.bind(this);
    }

    componentWillMount() {
        this.props.initNewsItemPage();
     
    }

    showModal(e, actype, newsId) {
       
      
        if (actype === 'create') {
           
                    this.props.initCreateNewsItemObj();      
            
        }
        if (actype === 'edit') {
            debugger;
            if(newsId) {
                this.props.initEditNewsItemObj(newsId);
            }
        }
        this.props.showModal(e,actype);
        this.setState({ actionType: this.props.ui.actionType, showModal: this.props.ui.showModal });
    }

    handleOk(e) {
        this.setState({ showModal: false });
    }

    handleCancel(e) {
        console.log("Canceled from news modal");
        this.setState({ showModal: false });
    }

    render() {      
      
        const columns = this.columns.map((col) => {
            return {
                ...col,
                onCell: record => ({
                    record,
                    title: col.title
                }),
            };
        });

        return (
            <ScrollPanel
                style={{
                    width: "100%",
                    height: "calc(100% - 40px)",
                    backgroundColor: "rgba(0,0,0,0)"
                }}
            >
               <div>

                   <Table
                        size= {"small"}
                       //style= {{width: "80%", height: "80%"}}
                        rowKey = "newsId"
                        title={() => <div>

                                News Items<div><Button type="primary" onClick={(e) => this.showModal(e, 'create')}>Create New</Button></div>                      
              </div>} 
              showHeader = {true}
                        bordered

                        expandRowByClick={true}
                        dataSource={this.props.newsItem.list}

                        expandedRowRender={record => <p style={{ margin:10, wordBreak: "keep-all" }}>{record.newsText}</p>}
                        columns={columns}
                        pagination={{ pageSize: 8}}
                        //scroll={{ y: 800, x: 200 }}
                      />
                </div>
                
             { this.state.actionType !== "" ?
                    <NewsModal 
                       modalVisible={this.state.showModal}
                       onOk={this.handleOk}
                       onCancel={this.handleCancel}
                       actionType={this.state.actionType}
                       newsItemObj={this.props.newsItem.newsItemObj}
                      editNewsItemObj={this.props.newsItem.editNewsItemObj}
                 /> :
                 <div></div>
             }
          </ScrollPanel>    
        );
    }
}

const mapStateToProps = state => {
    return {
        newsItem: state.newsItem,
        ui: state.ui
    };
};

const mapDispatchToProps = dispatch => {
    return bindActionCreators(
        {
           initCreateNewsItemObj,
           initEditNewsItemObj,
            initNewsItemPage,
            showModal
        },
        dispatch
    );
};

export default connect(mapStateToProps, mapDispatchToProps)(NewsItem);
